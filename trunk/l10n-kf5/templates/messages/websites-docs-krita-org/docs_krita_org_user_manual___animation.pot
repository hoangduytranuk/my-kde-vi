# SOME DESCRIPTIVE TITLE.
# Copyright (C) licensed under the GNU Free Documentation License 1.3+ unless stated otherwise
# This file is distributed under the same license as the Krita Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Krita Manual 5.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 00:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../<rst_epilog>:4
msgid ".. image:: images/icons/Krita_mouse_right.png\n"
"   :alt: mouseright"
msgstr ""

#: ../../user_manual/animation.rst:0
msgid ".. image:: images/animation/Introduction_to_animation_10.png"
msgstr ""

#: ../../user_manual/animation.rst:0
msgid ".. image:: images/animation/Introduction_to_animation_11.png"
msgstr ""

#: ../../user_manual/animation.rst:0
msgid ".. image:: images/animation/Introduction_to_animation_12.png"
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_02.png\n"
"   :alt: Layout of the layer stack."
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_03.png\n"
"   :alt: Our simple environment, consisting of a single horizon."
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_04.png\n"
"   :alt: A head and torso."
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_05.png\n"
"   :alt: Location of the onion skin icon."
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_06.png\n"
"   :alt: Onion skin is turned on."
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_07.png\n"
"   :alt: The current frame in black and the silhouette of the previous frame in red."
msgstr ""

#: ../../user_manual/animation.rst:None
msgid ".. image:: images/animation/Introduction_to_animation_08.png\n"
"   :alt: Current frame is black and silhouette of the future frame is green."
msgstr ""

#: ../../user_manual/animation.rst:1
msgid "Detailed guide on the animation workflow in Krita."
msgstr ""

#: ../../user_manual/animation.rst:13
msgid "Animation"
msgstr ""

#: ../../user_manual/animation.rst:15
msgid ".. image:: images/icons/addduplicateframe.svg\n"
"   :alt: duplicateframe"
msgstr ""

#: ../../user_manual/animation.rst:17
msgid ".. image:: images/icons/reference_images_tool.svg\n"
"   :alt: pintimeline"
msgstr ""

#: ../../user_manual/animation.rst:19
msgid ".. image:: images/icons/onionOff.svg\n"
"   :alt: onionoff"
msgstr ""

#: ../../user_manual/animation.rst:20
msgid ".. image:: images/icons/onionOn.svg\n"
"   :alt: onionon"
msgstr ""

#: ../../user_manual/animation.rst:21
msgid ".. image:: images/icons/keyframe-add.svg\n"
"   :alt: scalaradd"
msgstr ""

#: ../../user_manual/animation.rst:27
msgid "Animation with Krita"
msgstr ""

#: ../../user_manual/animation.rst:29
msgid "Thanks to the 2015 Kickstarter, :program:`Krita` has animation. In specific, :program:`Krita` has frame-by-frame raster animation."
msgstr ""

#: ../../user_manual/animation.rst:31
msgid "To access the animation features, the easiest way is to change your workspace to Animation. This will make the animation dockers and workflow appear."
msgstr ""

#: ../../user_manual/animation.rst:34
msgid "Workflow"
msgstr ""

#: ../../user_manual/animation.rst:36
msgid "In traditional animation workflow, what you do is that you make :term:`Keyframes <Keyframe>`, which contain the important poses, and then draw frames in between (:dfn:`tweening` in highly sophisticated animator's jargon)."
msgstr ""

#: ../../user_manual/animation.rst:38
msgid "For this workflow, there are three important dockers:"
msgstr ""

#: ../../user_manual/animation.rst:40
msgid "The :ref:`timeline_docker`. View and control all the frames in your animation. The timeline docker also contains functions to manage your layers. The layers that are created in the timeline docker also appear on the normal Layer docker."
msgstr ""

#: ../../user_manual/animation.rst:41
msgid "The :ref:`onion_skin_docker`. This docker controls the look of the onion skin, which in turn is useful for seeing the previous frame."
msgstr ""

#: ../../user_manual/animation.rst:42
msgid "The :ref:`animation_curves_docker`. This docker allows you to do minor tweening for animation curves."
msgstr ""

#: ../../user_manual/animation.rst:43
msgid "The :ref:`storyboard_docker`. This docker helps you create and keep track of storyboards."
msgstr ""

#: ../../user_manual/animation.rst:45
msgid "Furthermore, especially when you want to do a big animation, that is, any animation longer than 3 seconds, you will need to think about how you are going to approach this. Krita is specialized in :dfn:`frame by frame animation`, and because of this Krita keeps all the frames in memory. This means that animation files will eat up all of your computer's working memory (RAM). If you don't know what working memory is, you probably have too little to do a long sequence in Krita. Therefore, you need to take a page from professional animation and do some planning!"
msgstr ""

#: ../../user_manual/animation.rst:49
msgid ".. image:: images/dockers/Storyboard_thumbnailonly_view.png"
msgstr ""

#: ../../user_manual/animation.rst:49
msgid "The storyboard docker can help you plan out the shots of a scene."
msgstr ""

#: ../../user_manual/animation.rst:51
msgid "Typically, most animation projects start with a script or at the very least an outline of actions that will happen. You can do this in any kind of text editor you like. The next step is to create a :ref:`storyboard <storyboard_docker>`. They are sketches of the basic composition of each scene, with some extra notes on what is going to move, like camera movement, character movement, notes on audio, notes on color. These seem closer to a comic than an animation, but the key difference between the two is that in comics the composition is made to help the reader move their eyes over the page, while in animation the viewer's eyes will stay in relatively the same spot, so consecutive storyboard frames will have their most important elements in relatively the same place. If that seems a little abstract, don't worry. You can make a story board by using the animation functions, but the key here is that you use as little frames as possible. Export the story board using the render animation option."
msgstr ""

#: ../../user_manual/animation.rst:53
msgid "Then, the next step is to make an :dfn:`Animatic`. An animatic is basically the storyboard, but then animated. You are best off doing this in a video editor like `Kdenlive <http://kdenlive.org/>`_, `OpenShot <https://www.openshot.org/>`_, `Olive <https://olivevideoeditor.org/index.php>`_, or even Windows Movie Maker. *If you want to put everything together into one big animation you will need to learn how to use such a program to begin with, as Krita doesn't have extensive video and audio montage functions.*"
msgstr ""

#: ../../user_manual/animation.rst:55
msgid "Doing the animatic will allow you to see how the animation can be subdivided into small clips. If you are just starting out, you are best off limiting yourself to 12 frames per second. Then, a 10-second clip would be 120 frames. Try to figure out if you can subdivide your animation idea into clips of 10 seconds or shorter. You can import the story board frames associated with a specific clip by going to :menuselection:`File --> Import Animation Frames`. From there, slowly start building up your animation. During the sketching phase it may also help to work on a low resolution, like 800Ã—450 pixels. High resolution only starts mattering when you are doing line art, after all. And it will be hard to get to that point if you don't even have a rough outline."
msgstr ""

#: ../../user_manual/animation.rst:57
msgid "Always keep an eye on the memory consumption. You can see the memory consumption in the status bar, by clicking the resolution label. This label should also have a little progress bar that shows how much memory Krita is using at this moment. Don't let the memory bar get full: it will lead to Krita slowing down, and sometimes it might even mean Krita won't be able to export the animation on your specific machine. You can reduce memory consumption by:"
msgstr ""

#: ../../user_manual/animation.rst:59
msgid "Merging together layers. Yes, you cannot afford to have a layer for every single change. Often, the fewer layers, the better."
msgstr ""

#: ../../user_manual/animation.rst:60
msgid "In some cases by going to :menuselection:`Image --> Crop Layers to Image Size`, this will crop all layers to remove sections that are outside the canvas."
msgstr ""

#: ../../user_manual/animation.rst:61
msgid "Sometimes, certain layers don't need to be full color, especially if they're just black and white. You can then go to :menuselection:`Layers --> Convert --> Convert Layer Color Space` and convert the layer to a grayscale one. This will half the amount of RAM this specific layer will take up."
msgstr ""

#: ../../user_manual/animation.rst:62
msgid "Working smaller. Even if you imagined yourself animating in the 4K resolution, you might need to accept your computer just cannot handle this. Try going a step lower, on animations, even a 20% reduction can make a huge difference in memory consumption, while not being a huge difference in resolution."
msgstr ""

#: ../../user_manual/animation.rst:64
msgid "Also watch out that other programs on your computer aren't hogging all the RAM. Web browsers and chat programs tend to be the biggest culprits here, especially if you are streaming music or videos. If you are hurting for memory, see if you can get these functions to work on a separate device like a phone instead."
msgstr ""

#: ../../user_manual/animation.rst:66
msgid "Another thing you will want to do is make a ton of backups. Every time you hit an important section with an animation, like you finished the line art, or you did a pretty tricky section, you will want to use :menuselection:`File --> Incremental Backup` to make a separate copy of the current file to continue working in. This way, if the animation file gets corrupt, which could happen due to a power outage, or a cat jumping on the keyboard, you will still have a snapshot of the last important section. Other backup techniques, like copying the files to a cloud service, or to a backup hard drive are also very recommended."
msgstr ""

#: ../../user_manual/animation.rst:70
msgid "And while we're at it, whenever you've hit a milestone, don't forget to take a break as well! Doing big projects like animations take a lot of effort and concentration, so taking breaks is important to recharge yourself."
msgstr ""

#: ../../user_manual/animation.rst:72
msgid "When you are done, you will want to use :guilabel:`Render Animation` again. Now either export a frame sequence or a small video file, and then compose all the frame sequences and video files together in the video editor. Then you can render it to ``WebM``, and upload it to your favorite video hosting website."
msgstr ""

#: ../../user_manual/animation.rst:74
msgid "This may all seem a little complicated, but if your computer doesn't have a lot of resources, you have got to be resourceful yourself!"
msgstr ""

#: ../../user_manual/animation.rst:77
msgid "Introduction to animation: How to make a walk cycle"
msgstr ""

#: ../../user_manual/animation.rst:79
msgid "The best way to get to understand all these different parts is to actually use them. Walk cycles are considered the most basic form of a full animation, because of all the different parts involved with them. Therefore, going over how one makes a walk cycle should serve as a good introduction."
msgstr ""

#: ../../user_manual/animation.rst:82
msgid "Setup"
msgstr ""

#: ../../user_manual/animation.rst:84
msgid "First, we make a new file. On the first tab, we type in a nice ratio like 1280Ã—1024, set the dpi to 72 (we're making this for screens after all) and title the document 'walk cycle'."
msgstr ""

#: ../../user_manual/animation.rst:86
msgid "In the second tab, we choose a nice background color, and set the background to canvas-color. This means that Krita will automatically fill in any transparent bits with the background color. You can change this in :menuselection:`Image --> Image Properties`. This is very useful for animation, as the layer you do animation on **must** be semi-transparent to get :dfn:`onion skinning` working."
msgstr ""

#: ../../user_manual/animation.rst:89
msgid "Krita has a bunch of functionality for meta-data, starting at the :guilabel:`Create Document` screen. The title will be automatically used as a suggestion for saving and the description can be used by databases, or for you to leave comments behind. Not many people use it individually, but it can be useful for working in larger groups."
msgstr ""

#: ../../user_manual/animation.rst:91
msgid "Then hit :guilabel:`Create`!"
msgstr ""

#: ../../user_manual/animation.rst:93
msgid "Then, to get all the necessary tools for animation, select the animation workspace in :menuselection:`&Window --> Wor&kspace --> Animation`"
msgstr ""

#: ../../user_manual/animation.rst:95
msgid "Which should result in this:"
msgstr ""

#: ../../user_manual/animation.rst:99
msgid ".. image:: images/animation/Introduction_to_animation_01.png"
msgstr ""

#: ../../user_manual/animation.rst:99
msgid "The animation workspace adds the :ref:`timeline_docker` at the bottom."
msgstr ""

#: ../../user_manual/animation.rst:102
msgid "Animating"
msgstr ""

#: ../../user_manual/animation.rst:104
msgid "Make sure there's two transparent layers setup in the layer docker. You can add a new layer by pressing the :guilabel:`+` or by pressing :kbd:`ins`. Let's name the bottom one 'environment' and the top ``walkcycle`` by double-clicking their names in the layer docker."
msgstr ""

#: ../../user_manual/animation.rst:109
msgid "Use the :ref:`line_tool` to draw a single horizontal line. This is the ground."
msgstr ""

#: ../../user_manual/animation.rst:114
msgid "Then, select the ``walkcycle`` layer and draw a head and torso (you can use any brush for this)."
msgstr ""

#: ../../user_manual/animation.rst:119
msgid "Now, selecting a new frame will not make a new frame automatically. Krita doesn't actually see the ``walkcycle`` layer as an animated layer at all!"
msgstr ""

#: ../../user_manual/animation.rst:121
msgid "We can make it an animated layer by adding a frame to the timeline. A frame in the timeline to get a context menu. Select :guilabel:`Create Duplicate Frame` (|duplicateframe|)."
msgstr ""

#: ../../user_manual/animation.rst:125
msgid "If you select :guilabel:`Create Blank Frame`, the content of the layer will be dropped and a new blank frame will appear; since you want to preserve the image, you need to use :guilabel:`Create Duplicate Frame`."
msgstr ""

#: ../../user_manual/animation.rst:131
msgid "You can see it has become an animated layer because of the onion skin icon (|onionon|) showing up in the timeline docker."
msgstr ""

#: ../../user_manual/animation.rst:133
msgid "Use the :guilabel:`Create Duplicate Frame` button to copy the first frame onto the second. Then, use the :ref:`move_tool` (switch to it using the :kbd:`T` shortcut) with the :kbd:`Shift + â†‘` shortcut to move the frame contents up."
msgstr ""

#: ../../user_manual/animation.rst:135
msgid "We can see the difference by turning on the onion skinning (press the |onionoff|, so it becomes |onionon|):"
msgstr ""

#: ../../user_manual/animation.rst:143
msgid "Now, you should see the previous frame as red."
msgstr ""

#: ../../user_manual/animation.rst:146
msgid "Krita sees white as a color, not as transparent, so make sure the animation layer you are working on is transparent in the bits where there's no drawing. You can fix the situation by use the :ref:`filter_color_to_alpha` filter, but prevention is best."
msgstr ""

#: ../../user_manual/animation.rst:151
msgid "Future frames are drawn in green, and both colors can be configured in the onion skin docker."
msgstr ""

#: ../../user_manual/animation.rst:153
msgid "Now, we're going to draw the two extremes of the walk cycle. These are the pose where both legs are as far apart as possible, and the pose where one leg is full stretched and the other pulled in, ready to take the next step."
msgstr ""

#: ../../user_manual/animation.rst:157
msgid ".. image:: images/animation/Introduction_to_animation_09.png"
msgstr ""

#: ../../user_manual/animation.rst:157
msgid "The above image shows our two extremes: legs far apart, and one leg straight while the other is bent, as it's taking a step. This also shows the power of onion skins, as we can see both extremes at once. Notice also how the legs have been made semi-transparent. This isn't necessary with a stick figure, but useful in this case when we start copying."
msgstr ""

#: ../../user_manual/animation.rst:160
msgid "Let's copy these two. You can do this by doing |mouseright| on the frame, and then selecting :guilabel:`Copy Keyframes`. Then select the new position in the time line, |mouseright| again, and :guilabel:`Paste Keyframes`."
msgstr ""

#: ../../user_manual/animation.rst:162
msgid "Now then..."
msgstr ""

#: ../../user_manual/animation.rst:164
msgid "Copy frame 0 to frame 2."
msgstr ""

#: ../../user_manual/animation.rst:165
msgid "Copy frame 1 to frame 3."
msgstr ""

#: ../../user_manual/animation.rst:166
msgid "Erase the semi transparent lines to make it obvious which leg is in front of the other. In 0 and 1, we have the closer leg to the right, then bend, and in 2 and 3, we have the further leg to the right and then bend."
msgstr ""

#: ../../user_manual/animation.rst:170
msgid "In the animation settings, set the frame-rate to 4"
msgstr ""

#: ../../user_manual/animation.rst:174
msgid "Select all frames in the timeline docker by dragging-selecting them."
msgstr ""

#: ../../user_manual/animation.rst:178
msgid "Press play in the header."
msgstr ""

#: ../../user_manual/animation.rst:179
msgid "Enjoy your first animation!"
msgstr ""

#: ../../user_manual/animation.rst:182
msgid ".. image:: images/animation/animation_walkcycle_2021_4_frames.gif"
msgstr ""

#: ../../user_manual/animation.rst:184
msgid "Expanding upon your rough walk cycle"
msgstr ""

#: ../../user_manual/animation.rst:187 ../../user_manual/animation.rst:201
msgid ".. image:: images/animation/Introduction_to_animation_13.png"
msgstr ""

#: ../../user_manual/animation.rst:188
msgid "You can quickly make some space by the :kbd:`Alt + drag` shortcut on any frame. This'll move that frame and all others after it in one go. More efficient for us, however, is to select all frames, |mouseright| them, and then select :menuselection:`Hold frames --> Insert Hold Frame`, which will insert an empty space or :dfn:`Hold Frame` in between each :dfn:`Keyframe`."
msgstr ""

#: ../../user_manual/animation.rst:191
msgid "Make new frames in between each keyframe, and try to interpolate, or inbetween each frame you add."
msgstr ""

#: ../../user_manual/animation.rst:195
msgid "A lot has been written about how to inbetween properly, and it's one of the areas where animators express their own style the clearest. As such, we won't cover inbetweening itself here. We recommend you do a search for inbetweening tutorials on the internet. We also recommend animation analyses to get an idea of how intricate this subject is."
msgstr ""

#: ../../user_manual/animation.rst:197
msgid "For this particular example, I prefer to start by finding the position of the heel in a frame, then draw the rest of the foot, then the knees, and then the rest of the legs."
msgstr ""

#: ../../user_manual/animation.rst:199
msgid ".. image:: images/animation/Introduction_to_animation_14.png"
msgstr ""

#: ../../user_manual/animation.rst:202
msgid "You'll find that the more frames you add, the more difficult it becomes to keep track of the animation. There are two things you can do here. The first is to color label frames, you can do |mouseright| on the keyframes, and select any of the colors on the bottom."
msgstr ""

#: ../../user_manual/animation.rst:206
msgid ".. image:: images/animation/Introduction_to_animation_13b.png"
msgstr ""

#: ../../user_manual/animation.rst:206
msgid "In this example, the extremes are blue, the first inbetweens green and the less important inbetweens in yellow and orange."
msgstr ""

#: ../../user_manual/animation.rst:208
msgid "Another thing you can do is to adjust the onion skins."
msgstr ""

#: ../../user_manual/animation.rst:210
msgid "You can modify the onion skin by using the :ref:`onion_skin_docker`, where you can change how many frames are visible at once, by toggling them on the top row. The bottom row is for controlling transparency, while below there you can modify the colors and intensity of the coloring."
msgstr ""

#: ../../user_manual/animation.rst:213
msgid ".. image:: images/animation/Introduction_to_animation_15.png"
msgstr ""

#: ../../user_manual/animation.rst:216
msgid ".. image:: images/animation/Introduction_to_animation_14b.png"
msgstr ""

#: ../../user_manual/animation.rst:216
msgid "Here we've turned off all onion skinned frames except the next and previous ones."
msgstr ""

#: ../../user_manual/animation.rst:219
msgid "Animating with multiple layers"
msgstr ""

#: ../../user_manual/animation.rst:221
msgid "Okay, our walk cycle is missing some hands, let's add them on a separate layer. So we make a new layer, and name it hands and..."
msgstr ""

#: ../../user_manual/animation.rst:225
msgid ".. image:: images/animation/Introduction_to_animation_16.png"
msgstr ""

#: ../../user_manual/animation.rst:226
msgid "Our walk cycle is gone from the timeline docker! This is a feature actually. A full animation can have so many little parts that an animator might want to remove the layers they're not working on from the timeline docker."
msgstr ""

#: ../../user_manual/animation.rst:232
msgid "In :program:`Krita 4.3.0` and later, all new layers are pinned to the timeline by default."
msgstr ""

#: ../../user_manual/animation.rst:235
msgid "To show a layer whether it's active or not, you can \"pin\" it to the timeline by clicking the |pintimeline| icon while having the layer you want pinned selected in the :ref:`layer docker <layer_docker>`. We recommend pinning any layers that you're currently animating on."
msgstr ""

#: ../../user_manual/animation.rst:238
msgid ".. image:: images/animation/Introduction_to_animation_17.png"
msgstr ""

#: ../../user_manual/animation.rst:240
msgid ".. image:: images/animation/Introduction_to_animation_18.png"
msgstr ""

#: ../../user_manual/animation.rst:242
msgid "Exporting"
msgstr ""

#: ../../user_manual/animation.rst:244
msgid "When you are done, select :menuselection:`File --> Render Animation`. To render to a video file, you'll need a program called :program:`FFmpeg`. To learn more, please read :ref:`render_animation`."
msgstr ""

#: ../../user_manual/animation.rst:246
msgid "Enjoy your walk cycle!"
msgstr ""

#: ../../user_manual/animation.rst:249
msgid ".. image:: images/animation/Introduction_to_animation_walkcycle_02.gif"
msgstr ""

#: ../../user_manual/animation.rst:251
msgid "Animating with transform masks"
msgstr ""

#: ../../user_manual/animation.rst:255
msgid "If you want to move your walk cycle, you may use :ref:`transformation_masks` to move the frames from left to right without editing the pixels themselves."
msgstr ""

#: ../../user_manual/animation.rst:257
msgid "First, open up the :ref:`animation_curves_docker` if it has not been opened yet, under :menuselection:`Settings --> Dockers --> Animation Curves`."
msgstr ""

#: ../../user_manual/animation.rst:259
msgid "Then, group the layers that you want to transform, in our example, these are the ``hands`` and the ``walkcycle`` layers. |mouseright| the group, :menuselection:`Add --> Transform mask`."
msgstr ""

#: ../../user_manual/animation.rst:261
msgid "Then, go into the animation docker, select the first frame, and select :guilabel:`Adds keyframe to control scalar property` (|scalaradd|). In the Timeline Docker, :dfn:`Scalar Frames` will be marked with a diamond."
msgstr ""

#: ../../user_manual/animation.rst:263
msgid "Now select the :ref:`transform_tool`, press the screen and move the group to the start point. Press :kbd:`Enter` to confirm. Select the last frame in the docker, and then press the screen again, now move everything to the end point. Press :guilabel:`Zoom view to fit channel range` to view the whole frame."
msgstr ""

#: ../../user_manual/animation.rst:265
msgid "Now, when you press play, you will see the layer contents move. However, it is probably moving too fast. There are two things to reduce that problem: The first is to copy and paste the walk cycle frames, so it repeats 3-4 times, then move the scalar frame to the last frame."
msgstr ""

#: ../../user_manual/animation.rst:268
msgid ".. image:: images/animation/Introduction_to_animation_19.png"
msgstr ""

#: ../../user_manual/animation.rst:270
msgid ".. image:: images/animation/introduction_to_animation_walkcycle_03_simple_tween.gif"
msgstr ""

#: ../../user_manual/animation.rst:271
msgid "This still doesn't sync the walk cycle directly to the speed it's moving at. The best method, if a little laborious, is to go to the first frame where one of the feet touches the ground, and then mark that section (for example, using :ref:`guides <grids_and_guides_docker>`), then, in subsequent frames, use the Transform Tool on each frame to move it so that the foot stays in the same place as long as it's touching the ground. Do the same for the next bit where a foot touches the ground, and the next, and so on."
msgstr ""

#: ../../user_manual/animation.rst:275
msgid ".. image:: images/animation/Introduction_to_animation_20a.png"
msgstr ""

#: ../../user_manual/animation.rst:275
msgid "Each place where a foot touches the ground is marked using vertical guides, which allows us to adjust each frame, so the foot stays in place."
msgstr ""

#: ../../user_manual/animation.rst:278
msgid ".. image:: images/animation/Introduction_to_animation_20b.png"
msgstr ""

#: ../../user_manual/animation.rst:281
msgid ".. image:: images/animation/Introduction_to_animation_20c.png"
msgstr ""

#: ../../user_manual/animation.rst:281
msgid "The animation curve docker after adjusting each frame to be in the right spot. Krita can do curve interpolation (so you can create an ease-in and ease-out type curves), but for a situation like this, per-frame adjustment is quicker."
msgstr ""

#: ../../user_manual/animation.rst:283
msgid "After having done all that, you will end up with a smoothly moving walk cycle:"
msgstr ""

#: ../../user_manual/animation.rst:287
msgid ".. image:: images/animation/introduction_to_animation_walkcycle_03_adjusted_tween.gif"
msgstr ""

#: ../../user_manual/animation.rst:290
msgid ":ref:`timeline_docker`"
msgstr ""

#: ../../user_manual/animation.rst:291
msgid ":ref:`onion_skin_docker`"
msgstr ""

#: ../../user_manual/animation.rst:292
msgid ":ref:`animation_curves_docker`"
msgstr ""

#: ../../user_manual/animation.rst:293
msgid ":ref:`storyboard_docker`"
msgstr ""

#: ../../user_manual/animation.rst:294
msgid ":ref:`import_animation`"
msgstr ""

#: ../../user_manual/animation.rst:295
msgid ":ref:`audio_animation`"
msgstr ""

#: ../../user_manual/animation.rst:296
msgid ":ref:`render_animation`"
msgstr ""

#: ../../user_manual/animation.rst:297
msgid ":ref:`japanese_animation_template`"
msgstr ""
